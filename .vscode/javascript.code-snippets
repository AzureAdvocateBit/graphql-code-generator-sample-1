{
  "Azure Function": {
    "scope": "typescript",
    "prefix": "graphql-func",
    "body": [
      "import { ApolloServer } from \"apollo-server-azure-functions\";",
      "import { importSchema } from \"graphql-import\";",
      "import resolvers from \"./resolvers\";",
      "import { dataStore } from \"./data\";",
      "",
      "const server = new ApolloServer({",
      "  typeDefs: importSchema(\"./graphql/schema.graphql\"),",
      "  resolvers,",
      "  context: {",
      "    dataStore,",
      "  },",
      "});",
      "",
      "export default server.createHandler();",
      ""
    ]
  },

  "Data Store": {
    "scope": "typescript",
    "prefix": "ds-impl",
    "body": [
      "import { CosmosClient } from \"@azure/cosmos\";",
      "import { Question } from \"./generated\";",
      "",
      "class DataStore {",
      "\t#client: CosmosClient;",
      "\t#databaseName = \"trivia\";",
      "\t#containerName = \"questions\";",
      "",
      "#getContainer = () => {",
      "\treturn this.#client",
      "\t\t.database(this.#databaseName)",
      "\t\t.container(this.#containerName);",
      "\t};",
      "",
      "\tconstructor(client: CosmosClient) {",
      "\t\tthis.#client = client;",
      "\t}",
      "",
      "\tasync getQuestionById(id: string) {",
      "\t\tconst container = this.#getContainer();",
      "",
      "\t\tconst question = await container.items",
      "\t\t\t.query({",
      "\t\t\t\tquery: \"SELECT * FROM c WHERE c.id = @id\",",
      "\t\t\t\tparameters: [{ name: \"@id\", value: id }],",
      "\t\t\t})",
      "\t\t\t.fetchAll();",
      "",
      "\t\treturn question.resources[0];",
      "\t}",
      "}",
      "",
      "export const dataStore = new DataStore(new CosmosClient(process.env.CosmosDB));",
      "",
      "export type Context = {",
      "\tdataStore: DataStore;",
      "};"
    ]
  },

  "Random Question": {
    "scope": "typescript",
    "prefix": "random",
    "body": [
      "async getQuestions() {",
      "\tconst container = this.#getContainer();",
      "",
      "\tconst question = await container.items",
      "\t\t.query<Question>({",
      "\t\t\tquery: \"SELECT * FROM c\",",
      "\t\t})",
      "\t\t.fetchAll();",
      "",
      "\treturn question.resources;",
      "}"
    ]
  },

  "Question Resolver": {
    "scope": "typescript",
    "prefix": "Question",
    "body": [
      "  Question: {",
      "    answers(question) {",
      "      return question.incorrect_answers",
      "        .concat([question.correct_answer])",
      "        .sort();",
      "    },",
      "    correctAnswer(question) {",
      "      return question.correct_answer;",
      "    },",
      "    id(question) {",
      "      return question.id;",
      "    },",
      "    question(question) {",
      "      return question.question;",
      "    },",
      "  },"
    ]
  },

  "QuestionModel": {
    "scope": "typescript",
    "prefix": "QuestionModel",
    "body": [
      "export type QuestionModel = {",
      "\tid: string;",
      "\tquestion: string;",
      "\tcategory: string;",
      "\tincorrect_answers: string[];",
      "\tcorrect_answer: string;",
      "\ttype: string;",
      "\tdifficulty: \"easy\" | \"medium\" | \"hard\";",
      "};"
    ]
  },

  "Create Mutation": {
    "scope": "typescript",
    "prefix": "create-mutation",
    "body": [
      "  Mutation: {",
      "    async answerQuestion(_, { id, answer }, { dataStore }) {",
      "      const question = await dataStore.getQuestionById(id);",
      "",
      "      return {",
      "        questionId: id,",
      "        question: question.question,",
      "        correctAnswer: question.correct_answer,",
      "        submittedAnswer: answer,",
      "        correct: question.correct_answer === answer,",
      "      };",
      "    },",
      "  },"
    ],
    "description": "Create Mutation"
  },

  "Answer Resolver": {
    "prefix": "Answer",
    "scope": "typescript",
    "body": [
      "Answer: {",
      "  correct({ correct }) {",
      "    return correct;",
      "  },",
      "  correctAnswer({ correctAnswer }) {",
      "    return correctAnswer;",
      "  },",
      "  question({ question }) {",
      "    return question;",
      "  },",
      "  questionId({ questionId }) {",
      "    return questionId;",
      "  },",
      "  submittedAnswer({ submittedAnswer }) {",
      "    return submittedAnswer;",
      "  },",
      "},"
    ]
  },

  "Implement query": {
    "prefix": "implement-query",
    "scope": "typescript",
    "body": [
      "    question(_, { id }, { dataStore }) {",
      "      return dataStore.getQuestionById(id);",
      "    },",
      "    async getRandomQuestion(_, __, { dataStore }) {",
      "      const questions = await dataStore.getQuestions();",
      "      return questions[Math.floor(Math.random() * questions.length) + 1];",
      "    },"
    ],
    "description": "Implement query"
  }
}
